#-------------------------------------------------------------------------------
''' 001. Объединение двух словарей в один (in Python 3.5+).
         Если ключи в словарях совпадают, они переписываются (слева направо).
'''
x = {'a': 1, 'b': 2}
y = {'b': 3, 'c': 4}
z = {**x, **y}               # z ==  {'c': 4, 'a': 1, 'b': 3}

#-------------------------------------------------------------------------------
''' 002.
Словари имеют метод get(), который вернет значение по ключу,
либо указанное дефолтное значение, если ключа не существует.
'''
users = {382: "Alice", 590: "Bob", 951: "Dilbert"}
users.get(999, 'Unkknown_User')

#-------------------------------------------------------------------------------
''' 003. Использование Namedtuples короче, чем создание класса.
         Как и tuples, namedtuples являются неизменяемыми объектами
'''
from collections import namedtuple
Car = namedtuple('Car', 'color mileage')  # объявление Namedtuple
my_car = Car('red', 3812.4)               # Car ведет себя как класс
my_car.color                              # 'red'
my_car.mileage                            # 3812.4
my_car                                    # Car(color='red' , mileage=3812.4)
my_car.color = 'blue'                     # AttributeError: can't set attribute

#-------------------------------------------------------------------------------
''' 004. Различные способы проверки флага.
'''
x, y, z = 0, 1, 0
if x == 1 or y == 1 or z == 1:
    pass
if 1 in (x, y, z):
    pass
if x or y or z:
    pass
if any((x, y, z)):
    pass

#-------------------------------------------------------------------------------
''' 005. Nice view dict content out.
'''
import json
my_mapping = {'a': 23, 'b': 42, 'c': 0xc0ffee}
print(json.dumps(my_mapping, indent=4, sort_keys=True))
{
    "a": 23,
    "b": 42,
    "c": 12648430
}

#-------------------------------------------------------------------------------
''' 006. Function argument unpacking.
'''
def myfunc(x, y, z):
    print(x, y, z)

tuple_vec = (1, 0, 1)
dict_vec = {'x': 1, 'y': 0, 'z': 1}
myfunc(*tuple_vec)   # 1, 0, 1
myfunc(**dict_vec)   # 1, 0, 1

#-------------------------------------------------------------------------------
''' 007. Switch/case analogue.
'''
def dispatch_dict(operator, x, y):
    return {
        'add': lambda: x + y,
        'sub': lambda: x - y,
        'mul': lambda: x * y,
        'div': lambda: x / y,
    }.get(operator, lambda: None)()

#-------------------------------------------------------------------------------
''' 008. Объединенение списков. '''

L = [[1, 2, 3], [4, 5], [6], [7, 8, 9]]
LL = sum(L, [])   # [1, 2, 3, 4, 5, 6, 7, 8, 9]

#-------------------------------------------------------------------------------
''' 009. *var присваивает переменной список оставшикся элементов.
'''
seq = [1, 2, 3, 4]
a, *b, c = seq
print(a, b, c)    # [1, [2,3], 4]

#-------------------------------------------------------------------------------
''' 010. Транспонирование элементов вложенного списка.
'''
original = [('a', 'b'), ('c', 'd'), ('e', 'f')]
transposed = zip(*original)
print(list(transposed))   # [('a', 'c', 'e'), ('b', 'd', 'f')]

#-------------------------------------------------------------------------------
''' 011. Удаление дубликатов списка.
'''
items = [2, 2, 3, 3, 1]
unique = list(set(items))

#-------------------------------------------------------------------------------
''' 012. Присвоение первой непустой (имеющей истинное значение) переменной из ряда.
'''
x = a or b or c or None   # часто используютт так:  x = a or default

#-------------------------------------------------------------------------------
''' 013. Использование enumerate() для итерации по индексам и значениям.
'''
# второй аргумент enumerate задает начальный индекс
for i, item in enumerate(['a', 'b', 'c'], 1):

#-------------------------------------------------------------------------------
''' 014. Сортировка словаря по значениям.
'''
d = {'яблоки':40, 'апельсины':80, 'бананы':70}
print(sorted(d, key=d.get))   # ['яблоки', 'бананы', 'апельсины']

#-------------------------------------------------------------------------------
''' 015. Находжение наиболее часто повторяющегося элемента в списке.
'''
a = [1, 2, 3, 1, 2, 3, 2, 2, 4, 5, 1]
print(max(set(a), key=a.count))    # 2

#-------------------------------------------------------------------------------
''' 016. Находжение нескольких наиболее часто повторяющихся значений.
'''
from collections import Counter
a = [1, 2, 3, 1, 2, 3, 2, 2, 4, 5, 1]
cnt = Counter(a)
print(cnt.most_common(3))   # [(2, 4), (1, 3), (3, 2)]

#-------------------------------------------------------------------------------
''' 017. Python имеет встроенный http-сервер в наборе стандартных библиотек.
    > python -m http.server   ; запуск http-сервера.
'''

#-------------------------------------------------------------------------------
''' 018. Python's list comprehensions.
    vals = [expression for value in collection if <condition>]
'''

#-------------------------------------------------------------------------------
''' 019. Python 3.5+ supports 'type annotations' that can be used with tools
         like Mypy to write statically typed Python.
'''
def my_add(a: int, b: int) -> int:
    return a + b

#-------------------------------------------------------------------------------
''' 020. Создание копии списка. Очистка списка.
'''
lst = [1, 2, 3, 4, 5]
b = lst[:]
b is lst      # False
del lst[:]    # полная очистка списка - lst = []

#-------------------------------------------------------------------------------
''' 021. itertools.permutations() generates permutations for an iterable.
'''
import itertools
for p in itertools.permutations('ABCD'):
    print(p)

#-------------------------------------------------------------------------------
''' 022.  Dynamically calling functions.
'''
def call_func(name):
    klass = MyClass()
    return getattr(klass, name)()
call_func('function_name'

#-------------------------------------------------------------------------------
''' 023.  Get object class name.
'''
var = MyClass()
obj.__class__.__name__    # 'MyClass'

def myfunc(): pass
myfunc.__name__          #  'myfunc'


#-------------------------------------------------------------------------------
""" 024.  Проверка наследования.
"""
class BaseClass: pass
class SubClass(BaseClass): pass
issubclass(SubClass, BaseClass)   ; True
issubclass(SubClass, object)      ; True
issubclass(BaseClass, SubClass)   ; False


#-------------------------------------------------------------------------------
""" 025.  Просмотр глобальных и локальных переменных в текущей области видимости.
"""
globals()  # returns a dict with all global variables in the current scope
locals()  # returns a dict with all  local variables in the current scope:


#-------------------------------------------------------------------------------
''' 026. Блок else в циклах for и while
         (пропускается при выходе из цикла по break)
'''
for item in haystack:
    if item == needle:
        break
else:
    raise ValueError('Needle not found')

#-------------------------------------------------------------------------------
''' 027. Чтение текстового файла. Запись данных в файл.
'''
with open("data.txt") as f:
    print([line.strip() for line in f])
with open("data.txt", 'a', newline='\n') as f:
    f.write("some data ...")

#-------------------------------------------------------------------------------
''' 028. Изменение типа элементов списка.
'''
list(map(int,['1','2','3']))

#-------------------------------------------------------------------------------
''' 029. Транспонирование списка спсков.
'''
a = [[1,2,3], [4,5,6], [7,8,9]]
[list(i) for i in zip(*a)]

#-------------------------------------------------------------------------------
''' 030. Количество повторений паттерна в тексте.
'''
import re
len(re.findall('python', 'python is a programming language. python is python.'))

#-------------------------------------------------------------------------------
''' 031. Создание всех групп из двух наборов элементов.
'''
groups = [(a, b) for a in ['a', 'b'] for b in [1, 2, 3]]
> [('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3)]
#-------------------------------------------------------------------------------
''' 032. Выборка подмножества, напр., гласных из строки. 
'''       
result = [symbol for symbol in string_line if symbol in "aeiou"]
#-------------------------------------------------------------------------------
''' 033. Объединение двух словарей в один
'''       
def merge(dic1, dic2):
    dic3 = dic1.copy()
    dic3.update(dic2)
    return dic3
#-------------------------------------------------------------------------------
''' 034. Проверка наличия дубликатов.
'''
def check_duplicate(lst):
    return len(lst) != len(set(lst))
#-------------------------------------------------------------------------------
''' 035. Объединение элементов списка в строку.
'''       
my_list = ["Java", "Go", "Swift"]
str_list = ", ".join(my_list)
#-------------------------------------------------------------------------------
''' 036. Перемешивание списка.
'''
from random import shuffle
my_list = [1, 2, 3, 4, 5, 6]
random_list = shuffle(my_list)
#-------------------------------------------------------------------------------
''' 037. Разбиение на фрагменты (в каждом size элементов
'''
def chunk(my_list, size):
    return [my_list[i:i + size] for i in range(0, len(my_list), size)]
       
